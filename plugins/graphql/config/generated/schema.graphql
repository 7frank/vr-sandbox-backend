type Asset {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String!
  Type: ENUM_ASSET_TYPE!
  src: UploadFile
  regions(sort: String, limit: Int, start: Int, where: JSON): [Region]
  patches(sort: String, limit: Int, start: Int, where: JSON): [Patch]
}

type AssetAggregator {
  count: Int
}

type AssetConnection {
  values: [Asset]
  groupBy: AssetGroupBy
  aggregate: AssetAggregator
}

type AssetConnection_id {
  key: ID
  connection: AssetConnection
}

type AssetConnectionCreatedAt {
  key: DateTime
  connection: AssetConnection
}

type AssetConnectionName {
  key: String
  connection: AssetConnection
}

type AssetConnectionSrc {
  key: ID
  connection: AssetConnection
}

type AssetConnectionType {
  key: String
  connection: AssetConnection
}

type AssetConnectionUpdatedAt {
  key: DateTime
  connection: AssetConnection
}

type AssetGroupBy {
  _id: [AssetConnection_id]
  createdAt: [AssetConnectionCreatedAt]
  updatedAt: [AssetConnectionUpdatedAt]
  Name: [AssetConnectionName]
  Type: [AssetConnectionType]
  src: [AssetConnectionSrc]
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

enum ENUM_ASSET_TYPE {
  audio
  video
  image
  mesh
  other
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Asset | AssetConnection | AssetAggregator | AssetGroupBy | AssetConnection_id | AssetConnectionCreatedAt | AssetConnectionUpdatedAt | AssetConnectionName | AssetConnectionType | AssetConnectionSrc | Patch | PatchConnection | PatchAggregator | PatchGroupBy | PatchConnection_id | PatchConnectionCreatedAt | PatchConnectionUpdatedAt | PatchConnectionName | PatchConnectionData | PatchConnectionOwner | PatchConnectionDescription | PatchConnectionDependencies | Region | RegionConnection | RegionAggregator | RegionGroupBy | RegionConnection_id | RegionConnectionCreatedAt | RegionConnectionUpdatedAt | RegionConnectionName | RegionConnectionThumbnail | RegionConnectionData | RegionConnectionDescription | RegionConnectionOwner | RegionConnectionPosition | RegionConnectionDimensions | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionPatch

"""base container for 3d elements"""
type Patch {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  data: String
  owner: UsersPermissionsUser
  description: String
  dependencies: JSON
  assets(sort: String, limit: Int, start: Int, where: JSON): [Asset]
  regions(sort: String, limit: Int, start: Int, where: JSON): [Region]
}

type PatchAggregator {
  count: Int
}

type PatchConnection {
  values: [Patch]
  groupBy: PatchGroupBy
  aggregate: PatchAggregator
}

type PatchConnection_id {
  key: ID
  connection: PatchConnection
}

type PatchConnectionCreatedAt {
  key: DateTime
  connection: PatchConnection
}

type PatchConnectionData {
  key: String
  connection: PatchConnection
}

type PatchConnectionDependencies {
  key: JSON
  connection: PatchConnection
}

type PatchConnectionDescription {
  key: String
  connection: PatchConnection
}

type PatchConnectionName {
  key: String
  connection: PatchConnection
}

type PatchConnectionOwner {
  key: ID
  connection: PatchConnection
}

type PatchConnectionUpdatedAt {
  key: DateTime
  connection: PatchConnection
}

type PatchGroupBy {
  _id: [PatchConnection_id]
  createdAt: [PatchConnectionCreatedAt]
  updatedAt: [PatchConnectionUpdatedAt]
  name: [PatchConnectionName]
  data: [PatchConnectionData]
  owner: [PatchConnectionOwner]
  description: [PatchConnectionDescription]
  dependencies: [PatchConnectionDependencies]
}

type Query {
  asset(id: ID!): Asset
  assets(sort: String, limit: Int, start: Int, where: JSON): [Asset]
  assetsConnection(sort: String, limit: Int, start: Int, where: JSON): AssetConnection
  patch(id: ID!): Patch
  patches(sort: String, limit: Int, start: Int, where: JSON): [Patch]
  patchesConnection(sort: String, limit: Int, start: Int, where: JSON): PatchConnection
  region(id: ID!): Region
  regions(sort: String, limit: Int, start: Int, where: JSON): [Region]
  regionsConnection(sort: String, limit: Int, start: Int, where: JSON): RegionConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

"""a region containing arbitrary data for now"""
type Region {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  thumbnail: UploadFile
  data: String
  description: String
  owner: UsersPermissionsUser
  position: String
  dimensions: String
  assets(sort: String, limit: Int, start: Int, where: JSON): [Asset]
  objects(sort: String, limit: Int, start: Int, where: JSON): [Patch]
}

type RegionAggregator {
  count: Int
}

type RegionConnection {
  values: [Region]
  groupBy: RegionGroupBy
  aggregate: RegionAggregator
}

type RegionConnection_id {
  key: ID
  connection: RegionConnection
}

type RegionConnectionCreatedAt {
  key: DateTime
  connection: RegionConnection
}

type RegionConnectionData {
  key: String
  connection: RegionConnection
}

type RegionConnectionDescription {
  key: String
  connection: RegionConnection
}

type RegionConnectionDimensions {
  key: String
  connection: RegionConnection
}

type RegionConnectionName {
  key: String
  connection: RegionConnection
}

type RegionConnectionOwner {
  key: ID
  connection: RegionConnection
}

type RegionConnectionPosition {
  key: String
  connection: RegionConnection
}

type RegionConnectionThumbnail {
  key: ID
  connection: RegionConnection
}

type RegionConnectionUpdatedAt {
  key: DateTime
  connection: RegionConnection
}

type RegionGroupBy {
  _id: [RegionConnection_id]
  createdAt: [RegionConnectionCreatedAt]
  updatedAt: [RegionConnectionUpdatedAt]
  name: [RegionConnectionName]
  thumbnail: [RegionConnectionThumbnail]
  data: [RegionConnectionData]
  description: [RegionConnectionDescription]
  owner: [RegionConnectionOwner]
  position: [RegionConnectionPosition]
  dimensions: [RegionConnectionDimensions]
}

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
  patch: Patch
  regions(sort: String, limit: Int, start: Int, where: JSON): [Region]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionPatch {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  patch: [UsersPermissionsUserConnectionPatch]
}
